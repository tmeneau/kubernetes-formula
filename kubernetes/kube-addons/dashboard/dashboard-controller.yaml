{% from "kubernetes/map.jinja" import config with context %}
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: kube-cfg
  namespace: kube-system
  labels:
    k8s-app: kubernetes-dashboard
    kubernetes.io/cluster-service: "true"
    addonmanager.kubernetes.io/mode: Reconcile
data:
  kubeconfig.yaml: |
    apiVersion: v1
    kind: Config
    current-context: cluster.local
    preferences: {}
    clusters:
    - cluster:
        certificate-authority: /etc/kubernetes/ssl/ca.crt
        server: https://{{ config.advertise_address }}:6443
      name: cluster.local
    contexts:
    - context:
        cluster: cluster.local
        user: kubeconfig
      name: cluster.local
    users:
    - name: kubeconfig
      user:
        client-certificate: /etc/kubernetes/ssl/kubecfg.crt
        client-key: /etc/kubernetes/ssl/kubecfg.key
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: kubernetes-dashboard
  namespace: kube-system
  labels:
    k8s-app: kubernetes-dashboard
    kubernetes.io/cluster-service: "true"
    addonmanager.kubernetes.io/mode: Reconcile
spec:
  selector:
    matchLabels:
      k8s-app: kubernetes-dashboard
  template:
    metadata:
      labels:
        k8s-app: kubernetes-dashboard
      annotations:
        scheduler.alpha.kubernetes.io/critical-pod: ''
    spec:
      containers:
      - name: kubernetes-dashboard
        image: gcr.io/google_containers/kubernetes-dashboard-amd64:v1.6.0
        resources:
          # keep request = limit to keep this container in guaranteed class
          limits:
            cpu: 100m
            memory: 50Mi
          requests:
            cpu: 100m
            memory: 50Mi
        ports:
        - containerPort: 9090
        
        args:
          # - --apiserver-host=https://{{ config.advertise_address }}:6443
          # - --kubeconfig=/etc/kubernetes/addons/dashboard/kubeconfig.yaml
          
        livenessProbe:
          httpGet:
            path: /
            port: 9090
          initialDelaySeconds: 30
          timeoutSeconds: 30
        volumeMounts:
        - mountPath: /etc/kubernetes/addons/dashboard/
          name: kubeconfig
          readOnly: false
        - mountPath: /etc/kubernetes/ssl
          name: "etc-kube-ssl"
          readOnly: true
      tolerations:
      - key: "CriticalAddonsOnly"
        operator: "Exists"
      volumes:
        - name: kubeconfig
          configMap:
            name: kube-cfg
        - name: "etc-kube-ssl"
          hostPath:
            path: "/srv/kubernetes"
